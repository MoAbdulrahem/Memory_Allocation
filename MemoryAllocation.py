# -*- coding: utf-8 -*-
# Form implementation generated from reading ui file 'GUI_v1.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from tkinter import *
from tkinter import messagebox

canvas = Canvas(width=600, height=800, bg='white')
def draw_memory(x,y,z):
    '''
    Draws the memory
    '''
    canvas.delete("all")
    canvas.pack(expand=YES, fill=BOTH)
    canvas.create_rectangle(100, 50, 300, 50 + 600, width=5, outline='#DC143C', fill='#DC143C')
    canvas.create_rectangle(450, 75, 490, 100 + 50, width=5, outline='#000000', fill='#DC143C')
    canvas.create_rectangle(450, 125, 490, 150 + 50, width=5, outline='#000000', fill='#ffe873')
    canvas.create_rectangle(450, 175, 490, 175 + 50, width=5, outline='#000000', fill='#ebebeb')
    canvas.create_text(548, 100, text='Memory Allocation')
    canvas.create_text(545, 150, text='Process Allocation')
    canvas.create_text(508, 200, text='Hole')

    canvas.create_text(80, 50, text=float(0))
    canvas.create_text(80, 600 + 50, text=float(z))

    for i in range(len(x)):
        x[i] = float(x[i])
        y[i] = float(y[i])

        canvas.create_rectangle(100, (((x[i] / z) * 600) + 50), 300, ((((x[i] + y[i]) / z) * 600) + 50), width=5,
                                outline='#ebebeb', fill='#ebebeb')

        canvas.create_text(80, (((x[i] / z) * 600) + 50), text=x[i], font=("Purisa", 8))
        canvas.create_text(80, ((((x[i] + y[i]) / z) * 600) + 50), text=x[i] + y[i], font=("Purisa", 8))

def draw_segment(base, size, name, z):
    rect = canvas.create_rectangle(100, ((base / z) * 600) + 50, 300, (((base + size) / z) * 600) + 50, width=5,
                                   outline='#ffe873', fill='#ffe873')
    l1 = canvas.create_line(98, ((base / z) * 600) + 50 - 2, 303, ((base / z) * 600) + 50 - 2)
    l2 = canvas.create_line(98, (((base + size) / z) * 600) + 50 + 2, 303, (((base + size) / z) * 600) + 50 + 2)

    t1 = canvas.create_text(320, ((base / z) * 600) + 50, text=str(base), font=("Purisa", 8))

    t2 = canvas.create_text(320, (((base + size) / z) * 600) + 50, text=base + size, font=("Purisa", 8))

    t3 = canvas.create_text(180, (((((base + size) / z) * 600) + ((base / z) * 600)) / 2) + 50, text=name,
                            font=("Purisa", 8))

    rect_list = [rect, t1, t2, t3, l1, l2]

    componects[base] = rect_list


def clear_segement(base):
    canvas.delete(componects[base][0])
    canvas.delete(componects[base][1])
    canvas.delete(componects[base][2])
    canvas.delete(componects[base][3])
    canvas.delete(componects[base][4])
    canvas.delete(componects[base][5])
componects = dict()

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1199, 930)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(440, 10, 361, 101))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.groupBox.setFont(font)
        self.groupBox.setObjectName("groupBox")
        self.allocation_type = QtWidgets.QComboBox(self.groupBox)
        self.allocation_type.setGeometry(QtCore.QRect(0, 50, 211, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.allocation_type.setFont(font)
        self.allocation_type.setObjectName("allocation_type")
        self.allocation_type.addItem("")
        self.allocation_type.addItem("")
        self.allocation_type.addItem("")
        self.confirm_button = QtWidgets.QPushButton(self.groupBox)
        self.confirm_button.setGeometry(QtCore.QRect(230, 50, 121, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.confirm_button.setFont(font)
        self.confirm_button.setObjectName("confirm_button")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(403, -30, 20, 901))
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(10, 10, 381, 101))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.groupBox_2.setFont(font)
        self.groupBox_2.setObjectName("groupBox_2")
        self.memory_size = QtWidgets.QLineEdit(self.groupBox_2)
        self.memory_size.setGeometry(QtCore.QRect(10, 40, 361, 41))
        self.memory_size.setObjectName("memory_size")
        self.groupBox_4 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_4.setGeometry(QtCore.QRect(10, 110, 381, 751))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.groupBox_4.setFont(font)
        self.groupBox_4.setObjectName("groupBox_4")
        self.hole_size = QtWidgets.QTextEdit(self.groupBox_4)
        self.hole_size.setGeometry(QtCore.QRect(10, 120, 161, 501))
        self.hole_size.setObjectName("hole_size")
        self.hole_location = QtWidgets.QTextEdit(self.groupBox_4)
        self.hole_location.setGeometry(QtCore.QRect(200, 120, 171, 501))
        self.hole_location.setObjectName("hole_location")
        self.line_2 = QtWidgets.QFrame(self.groupBox_4)
        self.line_2.setGeometry(QtCore.QRect(170, 60, 20, 561))
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.label = QtWidgets.QLabel(self.groupBox_4)
        self.label.setGeometry(QtCore.QRect(10, 50, 121, 51))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.groupBox_4)
        self.label_2.setGeometry(QtCore.QRect(200, 50, 171, 51))
        self.label_2.setObjectName("label_2")
        self.draw_memory_button = QtWidgets.QPushButton(self.groupBox_4)
        self.draw_memory_button.setGeometry(QtCore.QRect(20, 660, 351, 71))
        self.draw_memory_button.setObjectName("draw_memory_button")
        self.groupBox_5 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_5.setGeometry(QtCore.QRect(420, 110, 381, 751))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.groupBox_5.setFont(font)
        self.groupBox_5.setObjectName("groupBox_5")
        self.segment_name = QtWidgets.QTextEdit(self.groupBox_5)
        self.segment_name.setGeometry(QtCore.QRect(10, 210, 161, 411))
        self.segment_name.setObjectName("segment_name")
        self.segmen_size = QtWidgets.QTextEdit(self.groupBox_5)
        self.segmen_size.setGeometry(QtCore.QRect(200, 210, 171, 411))
        self.segmen_size.setObjectName("segmen_size")
        self.line_3 = QtWidgets.QFrame(self.groupBox_5)
        self.line_3.setGeometry(QtCore.QRect(180, 190, 20, 431))
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.label_3 = QtWidgets.QLabel(self.groupBox_5)
        self.label_3.setGeometry(QtCore.QRect(20, 160, 161, 51))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.groupBox_5)
        self.label_4.setGeometry(QtCore.QRect(210, 160, 171, 51))
        self.label_4.setObjectName("label_4")
        self.allocate_button = QtWidgets.QPushButton(self.groupBox_5)
        self.allocate_button.setGeometry(QtCore.QRect(20, 660, 351, 71))
        self.allocate_button.setObjectName("allocate_button")
        self.memory_size_2 = QtWidgets.QLineEdit(self.groupBox_5)
        self.memory_size_2.setGeometry(QtCore.QRect(20, 110, 341, 41))
        self.memory_size_2.setObjectName("memory_size_2")
        self.label_6 = QtWidgets.QLabel(self.groupBox_5)
        self.label_6.setGeometry(QtCore.QRect(20, 70, 191, 31))
        self.label_6.setObjectName("label_6")
        self.groupBox_6 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_6.setGeometry(QtCore.QRect(840, 10, 351, 281))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.groupBox_6.setFont(font)
        self.groupBox_6.setObjectName("groupBox_6")
        self.label_5 = QtWidgets.QLabel(self.groupBox_6)
        self.label_5.setGeometry(QtCore.QRect(10, 40, 211, 51))
        self.label_5.setObjectName("label_5")
        self.available_segments = QtWidgets.QComboBox(self.groupBox_6)
        self.available_segments.setGeometry(QtCore.QRect(10, 100, 341, 51))
        self.available_segments.setObjectName("available_segments")
        self.deallocate_button = QtWidgets.QPushButton(self.groupBox_6)
        self.deallocate_button.setGeometry(QtCore.QRect(10, 180, 341, 81))
        self.deallocate_button.setObjectName("deallocate_button")
        self.line_4 = QtWidgets.QFrame(self.centralwidget)
        self.line_4.setGeometry(QtCore.QRect(820, 0, 20, 901))
        self.line_4.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1199, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    #################################################################
    ##############           Logic           ########################
    #################################################################

        self.draw_memory_button.clicked.connect(self.get_holes_data)
        self.deallocate_button.clicked.connect(self.deallocate)
        self.confirm_button.clicked.connect(self.select_allocation_algorithm) #Combobox select
        self.allocate_button.clicked.connect(self.Allocate)


    #################################################################
    def __init__(self, Process_Dict=None):
        #Getting the process name
        if Process_Dict == None:
            self.Process_Dict = dict()
        else:
            self.Process_Dict = dict(Process_Dict)

    def get_holes_data(self):
        '''
        scans the form and gets the memory size, holes sizes, and holes locations.
        '''
        try:
            input_hole_size = self.hole_size.toPlainText()  #The text in the textInput widget is of type QString
            self.holes_size = input_hole_size.splitlines()  #So we need to convert it to normal string before
            input_hole_base = self.hole_location.toPlainText() #seperating them bt lines
            self.holes_base = input_hole_base.splitlines()

            self.memory = int(self.memory_size.text())
            print('holes base  ',self.holes_base , '\nholes sizes ',self.holes_size , '\nmemory',self.memory)
            draw_memory(self.holes_base, self.holes_size, self.memory)
            # self.window = QtWidgets.QMainWindow()
            # self.ui = last(self.holes_base, self.holes_size, memory)
            # self.ui.setupUi(self.window)
            # print('2 holes base  ',self.holes_base , '\nholes sizes ',self.holes_size , '\nmemory',memory)
            self.window.show()
        except :
            if all(type(a)==float for a in self.holes_size)&all(type(b)==float for b in self.holes_base):
                messagebox.showinfo("Done","The Figure was drawn!")
            else:
                messagebox.showerror("Error","input Error!")


    def select_allocation_algorithm(self):
        '''
        Checks the current value of the combobox (Allocation Type) and determines
        the allocation algorithm for the allocate button based on that.
        '''
        if self.allocation_type.currentText()=="First Fit":
            self.first_fit = True

        elif self.allocation_type.currentText()=="Best Fit":
            self.best_fit = True


        elif self.allocation_type.currentText()=="Worst Fit":
            self.worst_fit = True

    

    
    def Allocate(self):
        '''
        Gets the process information and allocates it based on the available holes
        '''
        # try:
        self.process_name = self.memory_size_2.text()
        print('\nzzzzzzzzholes',self.holes_size,'\nzzzzzzzzzzzzzzmemory',self.process_name)
        
        #Getting the segments' names
        value_of_segment_name = self.segment_name.toPlainText()
        segments_name = value_of_segment_name.splitlines()
        #Getting the segments' sizes
        value_of_segmen_size = self.segmen_size.toPlainText()
        seg_s = value_of_segmen_size.splitlines()
        segments_size = [float(i) for i in seg_s]
        #Sorting the segments sizes based on size
        for i in range(len(segments_size)):
            swapped = False
            for j in range(len(segments_size) - (i + 1)):
                if (segments_size[j] < segments_size[j + 1]):
                    segments_size[j], segments_size[j + 1] = segments_size[j + 1], segments_size[j]
                    segments_name[j], segments_name[j + 1] = segments_name[j + 1], segments_name[j]
                    swapped = True
            if (swapped == False):
                break

        print('Process',self.process_name,'\nsegments',segments_name,'\nsizes',segments_size,'\nholes',self.holes_size)

        #Allocation if first fit
        if(self.first_fit):
            print('111111')
            if sum(self.holes_size) >= sum(segments_size) and max(self.holes_size) >= max(segments_size):
                hole_size = self.holes_size.copy()
                hole_base = self.holes_base.copy()
                is_valid = 0
                seg_name = []
                seg_base = []
                seg_size = []

                for x in range(len(segments_size)):
                    for y in range(len(segments_size)):
                        if hole_size[y] >= segments_size[x]:
                            seg_name.append(segments_name[x])
                            seg_size.append(segments_size[x])
                            seg_base.append(hole_base[y])
                            hole_size[y] = hole_size[y] - segments_size[x]
                            hole_base[y] = hole_base[y] + segments_size[x]
                            is_valid += 1
                            break

                if (is_valid == len(segments_size)):
                    for i in range(len(segments_size)):
                        draw_segment(seg_base[i], seg_size[i], self.process_name +' | '+ seg_name[i],
                                        self.memory)
                    self.holes_size = hole_size.copy()
                    self.holes_base = hole_base.copy()
                    p_name = self.process_name
                    # self.process_name = self.memory_size_2.text()
                    self.Process_Dict[p_name] = [seg_name, seg_base, seg_size]
                else:
                    messagebox.showerror("Space Error", 'No Enough Memory to allocate')
            else:
                messagebox.showerror("Space Error", 'No Enough Memory to allocate')

            messagebox.showinfo("update", 'The process was drawn!')


        else:
            messagebox.showerror('Error', 'Please Choose Best-fit or First-fit algorithim')
        # except :
        #     messagebox.showerror('Error', 'Error in input')


    def deallocate(self):
        print('Deallocatte')

#####################################################################
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.groupBox.setTitle(_translate("MainWindow", "Allocation Type"))
        self.allocation_type.setItemText(0, _translate("MainWindow", "First Fit"))
        self.allocation_type.setItemText(1, _translate("MainWindow", "Best Fit"))
        self.allocation_type.setItemText(2, _translate("MainWindow", "Worst Fit"))
        self.confirm_button.setText(_translate("MainWindow", "Confirm"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Enter Memory Size"))
        self.groupBox_4.setTitle(_translate("MainWindow", "Holes"))
        self.label.setText(_translate("MainWindow", "Holes\' Sizes"))
        self.label_2.setText(_translate("MainWindow", "Holes\' Locations"))
        self.draw_memory_button.setText(_translate("MainWindow", "Draw Memory"))
        self.groupBox_5.setTitle(_translate("MainWindow", "Process"))
        self.label_3.setText(_translate("MainWindow", "Segments"))
        self.label_4.setText(_translate("MainWindow", "size"))
        self.allocate_button.setText(_translate("MainWindow", "Allocate"))
        self.label_6.setText(_translate("MainWindow", "Process Name"))
        self.groupBox_6.setTitle(_translate("MainWindow", "Deallocate"))
        self.label_5.setText(_translate("MainWindow", "Process Name"))
        self.deallocate_button.setText(_translate("MainWindow", "Deallocate"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

    mainloop()
